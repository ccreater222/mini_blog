<?php
namespace app\controllers;

use app\models\Comment;
use app\models\User;
use yii\rest\ActiveController;
use yii\filters\AccessControl;
class CommentController extends ActiveController
{
    public function behaviors()
    {

        $behaviors = parent::behaviors ();
        $behaviors["access"] = [
            'class' => AccessControl::className(),
            'rules' => [
                // ??????
                [
                    'allow' => true,
                    'roles' => [User::findOne (["isAdmin"=>"1"])->username,"author"],
                    'actions' => ["index","view","create","update","delete","options","tree"]
                ],[
                    "allow"=>true,
                    "actions"=>["index","view","create","tree"],
                    'roles' =>['@']
                ],[
                    "allow"=>true,
                    "actions"=>["view","index","tree"],
                    'roles' =>['?']
                ]
            ],
        ];

        return $behaviors; // TODO: Change the autogenerated stub
    }

    public $modelClass = 'app\models\Comment';
    public function actionTree(){
//        $data = Comment::find ()->all ();
//        $result = [[],[]];//result 有 两部分，第一个是由id组成的树，另一个这是id对应的数据
//        $postId = \YII::$app->request->get ("postId",null);
//        $postIdOrCommentId="to";//to 代表的是对某个文章的回复,parent代表着对回复的回复,两者必有一个无效值
//        if($postId===null)return [];
//        $result[0] = $this->makeTree($result[0],$data,$postId,$postIdOrCommentId,$result[1]);
//        return $result;
        $postId = \YII::$app->request->get ("postId",null);
        if($postId==null)return [];
        if($postId=="latest"){
            $maxId=Comment::find()->max('id');

            return Comment::find()->where(['>', 'id', $maxId - 50])->all();
        }
        return Comment::findAll (["to"=>$postId]);

    }

    public function makeTree($tree,$data,$target,$postIdOrCommentId,&$map){
        $edit = &$tree;
        foreach ($data as $val){
            if($val[$postIdOrCommentId] == $target){
                $edit[$val["id"]] = [];
                $map[$val["id"]] = $val;
            }
        }
        foreach ($edit as $key=>$value){
            $edit[$key] = $this->makeTree($edit[$key],$data,$key,"parent",$map);
        }
        return $edit;

    }


}